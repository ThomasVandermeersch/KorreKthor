include ../header.pug

- var correction = JSON.parse(exam.correctionCriterias)
- var date = new Date(Date.parse(exam.createdAt))

div(class="container page create")
    if messages.recorrectmsg
        div(class="alert alert-success my-2" role="alert")= messages.recorrectmsg
    
    if messages.succCopyStatusChange
        div(class="alert alert-success my-2" role="alert")= messages.succCopyStatusChange
    
    if messages.errCopyStatusChange
        div(class="alert alert-danger my-2" role="alert")= messages.errCopyStatusChange

    div(class="card mt-2")
        div(class="card-body")
            h4(class="card-title") Exam #[strong #{exam.name}]
            //- if exam.status == 0
            //-     h4(class="card-title") Exam #[strong #{exam.name}] - Créé
            //- else if exam.status == 1
            //-     h4(class="card-title text-warning") Exam #[strong #{exam.name}] - Correction en cours...
            //- else if exam.status == 3
            //-     h4(class="card-title text-danger") Exam #[strong #{exam.name}] - Erreur, veuillez réessayer !
            //- else
            //-     h4(class="card-title text-success") Exam #[strong #{exam.name}] - Corrigé

            p(class="card-subtitle text-muted bouton")= exam.id
            p(class="card-subtitle mb-2 text-muted")= `${("0" + date.getDate()).slice(-2)}/${("0" + (date.getMonth()+1)).slice(-2)}/${date.getFullYear()} - ${("0" + date.getHours()).slice(-2)}:${("0" + date.getMinutes()).slice(-2)}:${("0" + date.getSeconds()).slice(-2)}`

            div(class="verison") Nombre de versions : #{exam.numberOfVersion}
            
            div(class="changeCopyVisibility")
                div(class="form-check form-switch") 
                    label(class="form-check-label bouton" for="changeCopyStatus") Activer la lecture des copies
                    
                    if exam.copyViewAvailable == 2
                        input(type="checkbox" class="form-check-input" id="changeCopyVisibility" checked, name="changeCopyVisibility" onclick=`changeCopyStatus(this,'${exam.id}')`)
                    else
                        input(type="checkbox" class="form-check-input" id="changeCopyVisibility" name="changeCopyVisibility" onclick=`changeCopyStatus(this,'${exam.id}')`)
                
                button(type="button" class='btn btn-sm switch-helper text-muted' data-toggle="tooltip" data-placement="bottom" title="Décider d'activer ou non la publication des résultats des copies de cet examen.")
                    i(class="fa fa-question-circle" style="font-size:20px;")


            div(class="criteria my-3") 
                if correction && correction.type
                    div(class="criteria mb-2") Critère de cotation : #[strong #{correction.type}]
                        
                        if correction.type == "normal"
                            div(class="mx-2")
                                table(class="table table-sm mb-1")
                                    tr
                                        th Reponses correctes (pts)
                                        td +#{correction.ptsRight}
                                    tr
                                        th Abstentions (pts)
                                        td +#{correction.ptsAbs}
                                    tr
                                        th Reponses fausses (pts)
                                        td -#{correction.ptsWrong}
                                
                        else 
                            div(class="mx-2")
                                table(class="table table-sm mb-1")
                                    tr
                                        th Reponses correctes (pts)
                                        td +#{correction.ptsRight}
                                    tr
                                        th Abstentions (pts)
                                        td +#{correction.ptsAbs}
                                    tr
                                        th Reponses fausses (pts)
                                        td -#{correction.ptsWrong}
                        
                    div(class="mt-1 row w-sm-75 float-end")
                        a(href=`/see/collaborators/${exam.id}` class="col bouton btn btn-warning btn-sm mx-1") Collaborateurs
                        a(href=`/correction/questionWeighting/${exam.id}` class="col bouton btn btn-warning btn-sm mx-1") Pondération des questions
                        a(href=`/correction/modifyCriteria/${exam.id}` class="col bouton btn btn-warning btn-sm mx-1") Modifier critères cotation
                        a(href=`/correction/modifyAnswers/${exam.id}` class="col bouton btn btn-warning btn-sm mx-1") Modifier les réponses


                else 
                    h6(class="text-danger mx-2") Correction error
                    a(href=`/correction/modifyCriteria/${exam.id}` class="btn btn-sm btn-secondary bouton mx-2") Définir une methode de cotation
                       

            if exam.correctionFile && exam.examFile
                br
                div(class="files mt-2")
                    a(href=`/see/exam/${exam.id}/downloadresult` class="bouton") Fichier d'examen (PDF)
            else 
                br
                div(class="float-end mt-3")
                    h6(class="text-danger") Fichiers introuvables
            
            a(href=`/upload/copies/${exam.id}` class="btn btn-success col-5 mt-4 bouton") Uploader et corriger des copies
            
            a(href=`/see/copies/${exam.id}` class="btn col-5 btn-secondary mt-4 float-end bouton") Afficher les copies des étudiants

            if enableExcelDownload
                a(href=`/correction/downloadExcel/${exam.id}` class="btn col-12 btn-success mt-4 bouton") Télécharger les résultats et les statistiques (fichier excel) 

            input(type='hidden' id='examId' value=exam.id)

script.
    function post(path, params, method='post') {
        /**
        * "handmade" javascript POST function
        * This function make a posts request to path with params as args
        */
        const form = document.createElement('form');
        form.method = method;
        form.action = path;
    
        for (const key in params) {
            if (params.hasOwnProperty(key)) {
                const hiddenField = document.createElement('input');
                hiddenField.type = 'hidden';
                hiddenField.name = key;
                hiddenField.value = params[key];
                form.appendChild(hiddenField);
            }
        }

        document.body.appendChild(form);
        form.submit();
    }

    function changeCopyStatus(event, examID){
        object = {"copyViewAvailable":event.checked ? 2 : 0, "examid":examID}
        post("/correction/changeCopyStatus/" + document.getElementById('examId').value , object)
    }
include ../footer.pug
